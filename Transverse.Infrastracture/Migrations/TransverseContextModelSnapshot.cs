// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey.Transverse.Infrastracture.Data;

namespace Survey.Transverse.Infrastracture.Migrations
{
    [DbContext(typeof(TransverseContext))]
    partial class TransverseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Survey.Transverse.Domain.Features.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("FEATURES","Identity");
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("Invalidated");

                    b.Property<string>("JwtId")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Token")
                        .HasMaxLength(250);

                    b.Property<bool>("Used");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("REFRESH_TOKENS","Identity");
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("PERMISSIONS","Identity");
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Permissions.PermissionFeature", b =>
                {
                    b.Property<Guid>("FeatureId");

                    b.Property<Guid>("PermissionId");

                    b.Property<DateTime>("AssociatedOn");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("FeatureId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PERMISSIONS_FEATURES","Identity");
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastConnexionOn");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("USERS","Identity");
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Users.UserPermission", b =>
                {
                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("AssociatedOn");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("USER_PERMISSIONS","Identity");
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Features.Feature", b =>
                {
                    b.OwnsOne("Survey.Transverse.Domain.Features.FeatureInfo", "FeatureInfo", b1 =>
                        {
                            b1.Property<Guid>("FeatureId");

                            b1.Property<string>("Action")
                                .IsRequired()
                                .HasColumnName("Action")
                                .HasMaxLength(50);

                            b1.Property<string>("Controller")
                                .IsRequired()
                                .HasColumnName("Controller")
                                .HasMaxLength(50);

                            b1.Property<string>("ControllerActionName")
                                .HasColumnName("ControllerActionName");

                            b1.Property<string>("Description")
                                .HasColumnName("Description")
                                .HasMaxLength(500);

                            b1.Property<string>("Label")
                                .HasColumnName("Label")
                                .HasMaxLength(50);

                            b1.HasKey("FeatureId");

                            b1.ToTable("FEATURES","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Features.Feature")
                                .WithOne("FeatureInfo")
                                .HasForeignKey("Survey.Transverse.Domain.Features.FeatureInfo", "FeatureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.CreateInfo", "CreateInfo", b1 =>
                        {
                            b1.Property<Guid>("FeatureId");

                            b1.Property<Guid?>("CreatedBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CreatedBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("CreatedOn")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CreatedOn")
                                .HasDefaultValue(new DateTime(2020, 4, 19, 14, 22, 24, 944, DateTimeKind.Local).AddTicks(5245));

                            b1.HasKey("FeatureId");

                            b1.ToTable("FEATURES","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Features.Feature")
                                .WithOne("CreateInfo")
                                .HasForeignKey("Survey.Transverse.Domain.CreateInfo", "FeatureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.DeleteInfo", "DeleteInfo", b1 =>
                        {
                            b1.Property<Guid>("FeatureId");

                            b1.Property<string>("DeleteReason")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletReason")
                                .HasMaxLength(250)
                                .HasDefaultValue(null);

                            b1.Property<Guid?>("DeletedBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletedBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("DeletedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletedOn")
                                .HasDefaultValue(null);

                            b1.HasKey("FeatureId");

                            b1.ToTable("FEATURES","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Features.Feature")
                                .WithOne("DeleteInfo")
                                .HasForeignKey("Survey.Transverse.Domain.DeleteInfo", "FeatureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.DisabeleInfo", "DisabeleInfo", b1 =>
                        {
                            b1.Property<Guid>("FeatureId");

                            b1.Property<Guid?>("DisabledBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DisabledBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("DisabledOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DisabledOn")
                                .HasDefaultValue(null);

                            b1.HasKey("FeatureId");

                            b1.ToTable("FEATURES","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Features.Feature")
                                .WithOne("DisabeleInfo")
                                .HasForeignKey("Survey.Transverse.Domain.DisabeleInfo", "FeatureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Identity.RefreshToken", b =>
                {
                    b.HasOne("Survey.Transverse.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Permissions.Permission", b =>
                {
                    b.OwnsOne("Survey.Transverse.Domain.Permissions.PermissionInfo", "PermissionInfo", b1 =>
                        {
                            b1.Property<Guid>("PermissionId");

                            b1.Property<string>("Description")
                                .HasColumnName("Description")
                                .HasMaxLength(250);

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasColumnName("Label")
                                .HasMaxLength(50);

                            b1.HasKey("PermissionId");

                            b1.ToTable("PERMISSIONS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Permissions.Permission")
                                .WithOne("PermissionInfo")
                                .HasForeignKey("Survey.Transverse.Domain.Permissions.PermissionInfo", "PermissionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.CreateInfo", "CreateInfo", b1 =>
                        {
                            b1.Property<Guid>("PermissionId");

                            b1.Property<Guid?>("CreatedBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CreatedBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("CreatedOn")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CreatedOn")
                                .HasDefaultValue(new DateTime(2020, 4, 19, 14, 22, 24, 960, DateTimeKind.Local).AddTicks(6628));

                            b1.HasKey("PermissionId");

                            b1.ToTable("PERMISSIONS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Permissions.Permission")
                                .WithOne("CreateInfo")
                                .HasForeignKey("Survey.Transverse.Domain.CreateInfo", "PermissionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.DeleteInfo", "DeleteInfo", b1 =>
                        {
                            b1.Property<Guid>("PermissionId");

                            b1.Property<string>("DeleteReason")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletReason")
                                .HasMaxLength(250)
                                .HasDefaultValue(null);

                            b1.Property<Guid?>("DeletedBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletedBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("DeletedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletedOn")
                                .HasDefaultValue(null);

                            b1.HasKey("PermissionId");

                            b1.ToTable("PERMISSIONS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Permissions.Permission")
                                .WithOne("DeleteInfo")
                                .HasForeignKey("Survey.Transverse.Domain.DeleteInfo", "PermissionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.DisabeleInfo", "DisabeleInfo", b1 =>
                        {
                            b1.Property<Guid>("PermissionId");

                            b1.Property<Guid?>("DisabledBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DisabledBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("DisabledOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DisabledOn")
                                .HasDefaultValue(null);

                            b1.HasKey("PermissionId");

                            b1.ToTable("PERMISSIONS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Permissions.Permission")
                                .WithOne("DisabeleInfo")
                                .HasForeignKey("Survey.Transverse.Domain.DisabeleInfo", "PermissionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Permissions.PermissionFeature", b =>
                {
                    b.HasOne("Survey.Transverse.Domain.Features.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survey.Transverse.Domain.Permissions.Permission", "Permission")
                        .WithMany("PermissionFeatures")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Users.User", b =>
                {
                    b.OwnsOne("Survey.Transverse.Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<string>("EmailAdress")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasMaxLength(50);

                            b1.HasKey("UserId");

                            b1.ToTable("USERS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Users.User")
                                .WithOne("Email")
                                .HasForeignKey("Survey.Transverse.Domain.Users.Email", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.Users.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<string>("FirstName")
                                .HasColumnName("FirstName")
                                .HasMaxLength(50);

                            b1.Property<string>("LastName")
                                .HasColumnName("LastName")
                                .HasMaxLength(50);

                            b1.HasKey("UserId");

                            b1.ToTable("USERS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Users.User")
                                .WithOne("FullName")
                                .HasForeignKey("Survey.Transverse.Domain.Users.FullName", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.Users.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<byte[]>("PasswordHash")
                                .HasColumnName("PasswordHash");

                            b1.Property<byte[]>("PasswordSalt")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("UserId");

                            b1.ToTable("USERS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Users.User")
                                .WithOne("Password")
                                .HasForeignKey("Survey.Transverse.Domain.Users.Password", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.CreateInfo", "CreateInfo", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<Guid?>("CreatedBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CreatedBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("CreatedOn")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CreatedOn")
                                .HasDefaultValue(new DateTime(2020, 4, 19, 14, 22, 24, 908, DateTimeKind.Local).AddTicks(1808));

                            b1.HasKey("UserId");

                            b1.ToTable("USERS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Users.User")
                                .WithOne("CreateInfo")
                                .HasForeignKey("Survey.Transverse.Domain.CreateInfo", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Survey.Transverse.Domain.DeleteInfo", "DeleteInfo", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<string>("DeleteReason")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletReason")
                                .HasMaxLength(250)
                                .HasDefaultValue(null);

                            b1.Property<Guid?>("DeletedBy")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletedBy")
                                .HasDefaultValue(null);

                            b1.Property<DateTime?>("DeletedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("DeletedOn")
                                .HasDefaultValue(null);

                            b1.HasKey("UserId");

                            b1.ToTable("USERS","Identity");

                            b1.HasOne("Survey.Transverse.Domain.Users.User")
                                .WithOne("DeleteInfo")
                                .HasForeignKey("Survey.Transverse.Domain.DeleteInfo", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Survey.Transverse.Domain.Users.UserPermission", b =>
                {
                    b.HasOne("Survey.Transverse.Domain.Permissions.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survey.Transverse.Domain.Users.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
